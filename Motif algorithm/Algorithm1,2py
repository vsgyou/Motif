#%%
from torch.utils.data import DataLoader, Dataset
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import yfinance as yf
import random
import matplotlib.pyplot as plt
from tqdm import tqdm
#%%
def window(data, seq_len, stride = 1):
    L = data.shape[0]
    data_tensor = torch.tensor(data)
    data_tensor = data_tensor.view(-1,1)    
    num_samples = (L - seq_len) // stride + 1
    X = torch.zeros(num_samples,seq_len,1)

    for i in range(num_samples):
        X[i,:] = data_tensor[i*stride : i*stride+seq_len]
    return X
#%%
def euclidean_distance(a,b):
    diff = a-b
    squared_diff = diff ** 2
    sum_squared_diff = sum(squared_diff)
    distance = torch.sqrt(sum_squared_diff)
    return distance

#%%
# Data
stock_code = '005930.KS'
start_date = '2013-01-01'
end_date = '2023-07-31'
samsung_data = yf.download(stock_code, start = start_date, end = end_date)
close = samsung_data['Close']
seq_len = 7
X = window(data = close, seq_len = seq_len)
# %%
# Algorithm 1. Brute Force Motif Discovery
best_so_far = np.inf
L1 = []
L2 = []
for i in tqdm(range(1,X.shape[0])):
    for j in range(i,X.shape[0]):
        if abs(i-j) > 2/seq_len:
            if euclidean_distance(X[i],X[j]) < best_so_far:
                best_so_far = euclidean_distance(X[i],X[j])
                L1 = i
                L2 = j


plt.plot(close[500:1000], label = 'close Price')
highlight_indices1 = list(range(L1,L1+seq_len))
highlight_indices2 = list(range(L2,L2+seq_len))
plt.plot(close[highlight_indices1].index,close[highlight_indices1],color = 'red')
plt.plot(close[highlight_indices2].index,close[highlight_indices2],color = 'red')

plt.plot(X[L1])
plt.plot(X[L2])
plt.legend()
plt.show()
#%%
df = pd.DataFrame(index = range(X.shape[0]-1), columns = range(X.shape[0]-1))
X.shape
X_a = X.view(X.shape[0],X.shape[1])
X_a = X_a.numpy()
for i in range(0,X_a.shape[0]-1):
    for j in range(i+1,X_a.shape[0]-1):
        df.at[i,j] = np.sqrt(sum((X_a[i]-X_a[j])**2))
        df.at[j,i] = df.at[i,j]

values_array = df.values
unique_sorted_values = np.sort(np.unique(values_array))
min_5 = unique_sorted_values[1:6]

value_index = {value:np.argwhere(values_array == value) for value in min_5}


#%%
# Algorithm 2. Speeded up Brute Force Motif Discovory
best_so_far = np.inf
L1 = []
L2 = []
ref = random.randint(0,X.shape[0])
Dist = []
for j in range(0,X.shape[0]):
    distance = list([j,euclidean_distance(X[ref],X[j]).item()])
    Dist.append(distance)
    if Dist[j][1] < best_so_far and Dist[j][1] !=0:
        best_so_far = Dist[j][1]
        L1 = ref
        L2 = j

Dist_sorted = sorted(Dist,key = lambda x:x[1])
offset = 0
abandon = False
while abandon == False:
    offset += 1
    abandon = True
    for j in range(0,X.shape[0]-offset):
        if Dist_sorted[j][1] - Dist_sorted[j+offset][1] < best_so_far:
            abandon = False
            d = euclidean_distance(X[Dist_sorted[j][0]],X[Dist_sorted[j+offset][0]])
            if d < best_so_far:
                best_so_far = d
                L1 = Dist_sorted[j][0]
                L2 = Dist_sorted[j+offset][0]

plt.plot(close[L1:L1+seq_len])
plt.plot(close[L2:L2+seq_len])

X[Dist_sorted[345][0]]
X[Dist_sorted[349][0]]

euclidean_distance(X[Dist_sorted[345][0]],X[Dist_sorted[349][0]])